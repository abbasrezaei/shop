{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _jsxFileName = \"D:\\\\Project\\\\shop\\\\node_modules\\\\react-native-confirmation-code-input\\\\components\\\\ConfirmationCodeInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar viewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;\n\nvar ConfirmationCodeInput = function (_Component) {\n  (0, _inherits2.default)(ConfirmationCodeInput, _Component);\n\n  var _super = _createSuper(ConfirmationCodeInput);\n\n  function ConfirmationCodeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ConfirmationCodeInput);\n    _this = _super.call(this, props);\n    _this.state = {\n      codeArr: new Array(_this.props.codeLength).fill(''),\n      currentIndex: 0\n    };\n    _this.codeInputRefs = [];\n    return _this;\n  }\n\n  (0, _createClass2.default)(ConfirmationCodeInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          compareWithCode = _this$props.compareWithCode,\n          codeLength = _this$props.codeLength,\n          inputPosition = _this$props.inputPosition;\n\n      if (compareWithCode && compareWithCode.length !== codeLength) {\n        console.error(\"Invalid props: compareWith length is not equal to codeLength\");\n      }\n\n      if (_lodash.default.indexOf(['center', 'left', 'right', 'full-width'], inputPosition) === -1) {\n        console.error('Invalid input position. Must be in: center, left, right, full');\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.setState({\n        codeArr: new Array(this.props.codeLength).fill(''),\n        currentIndex: 0\n      });\n\n      this._setFocus(0);\n    }\n  }, {\n    key: \"_setFocus\",\n    value: function _setFocus(index) {\n      this.codeInputRefs[index].focus();\n    }\n  }, {\n    key: \"_blur\",\n    value: function _blur(index) {\n      this.codeInputRefs[index].blur();\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(index) {\n      var newCodeArr = _lodash.default.clone(this.state.codeArr);\n\n      var currentEmptyIndex = _lodash.default.findIndex(newCodeArr, function (c) {\n        return !c;\n      });\n\n      if (currentEmptyIndex !== -1 && currentEmptyIndex < index) {\n        return this._setFocus(currentEmptyIndex);\n      }\n\n      for (var i in newCodeArr) {\n        if (i >= index) {\n          newCodeArr[i] = '';\n        }\n      }\n\n      this.setState({\n        codeArr: newCodeArr,\n        currentIndex: index\n      });\n    }\n  }, {\n    key: \"_isMatchingCode\",\n    value: function _isMatchingCode(code, compareWithCode) {\n      var ignoreCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (ignoreCase) {\n        return code.toLowerCase() == compareWithCode.toLowerCase();\n      }\n\n      return code == compareWithCode;\n    }\n  }, {\n    key: \"_getContainerStyle\",\n    value: function _getContainerStyle(size, position) {\n      switch (position) {\n        case 'left':\n          return {\n            justifyContent: 'flex-start',\n            height: size\n          };\n\n        case 'center':\n          return {\n            justifyContent: 'center',\n            height: size\n          };\n\n        case 'right':\n          return {\n            justifyContent: 'flex-end',\n            height: size\n          };\n\n        default:\n          return {\n            justifyContent: 'space-between',\n            height: size\n          };\n      }\n    }\n  }, {\n    key: \"_getInputSpaceStyle\",\n    value: function _getInputSpaceStyle(space) {\n      var inputPosition = this.props.inputPosition;\n\n      switch (inputPosition) {\n        case 'left':\n          return {\n            marginRight: space\n          };\n\n        case 'center':\n          return {\n            marginRight: space / 2,\n            marginLeft: space / 2\n          };\n\n        case 'right':\n          return {\n            marginLeft: space\n          };\n\n        default:\n          return {\n            marginRight: 0,\n            marginLeft: 0\n          };\n      }\n    }\n  }, {\n    key: \"_getClassStyle\",\n    value: function _getClassStyle(className, active) {\n      var _this$props2 = this.props,\n          cellBorderWidth = _this$props2.cellBorderWidth,\n          activeColor = _this$props2.activeColor,\n          inactiveColor = _this$props2.inactiveColor,\n          space = _this$props2.space;\n\n      var classStyle = _objectSpread({}, this._getInputSpaceStyle(space), {\n        color: activeColor\n      });\n\n      switch (className) {\n        case 'clear':\n          return _lodash.default.merge(classStyle, {\n            borderWidth: 0\n          });\n\n        case 'border-box':\n          return _lodash.default.merge(classStyle, {\n            borderWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n\n        case 'border-circle':\n          return _lodash.default.merge(classStyle, {\n            borderWidth: cellBorderWidth,\n            borderRadius: 50,\n            borderColor: active ? activeColor : inactiveColor\n          });\n\n        case 'border-b':\n          return _lodash.default.merge(classStyle, {\n            borderBottomWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n\n        case 'border-b-t':\n          return _lodash.default.merge(classStyle, {\n            borderTopWidth: cellBorderWidth,\n            borderBottomWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n\n        case 'border-l-r':\n          return _lodash.default.merge(classStyle, {\n            borderLeftWidth: cellBorderWidth,\n            borderRightWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n\n        default:\n          return className;\n      }\n    }\n  }, {\n    key: \"_onKeyPress\",\n    value: function _onKeyPress(e) {\n      if (e.nativeEvent.key === 'Backspace') {\n        var currentIndex = this.state.currentIndex;\n        var nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;\n\n        this._setFocus(nextIndex);\n      }\n    }\n  }, {\n    key: \"_onInputCode\",\n    value: function _onInputCode(character, index) {\n      var _this$props3 = this.props,\n          codeLength = _this$props3.codeLength,\n          onFulfill = _this$props3.onFulfill,\n          compareWithCode = _this$props3.compareWithCode,\n          ignoreCase = _this$props3.ignoreCase;\n\n      var newCodeArr = _lodash.default.clone(this.state.codeArr);\n\n      newCodeArr[index] = character;\n\n      if (index == codeLength - 1) {\n        var code = newCodeArr.join('');\n\n        if (compareWithCode) {\n          var isMatching = this._isMatchingCode(code, compareWithCode, ignoreCase);\n\n          onFulfill(isMatching, code);\n          !isMatching && this.clear();\n        } else {\n          onFulfill(code);\n        }\n\n        this._blur(this.state.currentIndex);\n      } else {\n        this._setFocus(this.state.currentIndex + 1);\n      }\n\n      this.setState(function (prevState) {\n        return {\n          codeArr: newCodeArr,\n          currentIndex: prevState.currentIndex + 1\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props4 = this.props,\n          codeLength = _this$props4.codeLength,\n          codeInputStyle = _this$props4.codeInputStyle,\n          containerStyle = _this$props4.containerStyle,\n          inputPosition = _this$props4.inputPosition,\n          autoFocus = _this$props4.autoFocus,\n          className = _this$props4.className,\n          size = _this$props4.size,\n          activeColor = _this$props4.activeColor;\n      var initialCodeInputStyle = {\n        width: size,\n        height: size\n      };\n      var codeInputs = [];\n\n      var _loop = function _loop(i) {\n        var id = i;\n        codeInputs.push(_react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n          key: id,\n          ref: function ref(_ref) {\n            return _this2.codeInputRefs[id] = _ref;\n          },\n          style: [styles.codeInput, initialCodeInputStyle, _this2._getClassStyle(className, _this2.state.currentIndex == id), codeInputStyle],\n          underlineColorAndroid: \"transparent\",\n          selectionColor: activeColor,\n          keyboardType: 'name-phone-pad',\n          returnKeyType: 'done'\n        }, _this2.props, {\n          autoFocus: autoFocus && id == 0,\n          onFocus: function onFocus() {\n            return _this2._onFocus(id);\n          },\n          value: _this2.state.codeArr[id] ? _this2.state.codeArr[id].toString() : '',\n          onChangeText: function onChangeText(text) {\n            return _this2._onInputCode(text, id);\n          },\n          onKeyPress: function onKeyPress(e) {\n            return _this2._onKeyPress(e);\n          },\n          maxLength: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 9\n          }\n        })));\n      };\n\n      for (var i = 0; i < codeLength; i++) {\n        _loop(i);\n      }\n\n      return _react.default.createElement(_reactNative.View, {\n        style: [styles.container, this._getContainerStyle(size, inputPosition), containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 7\n        }\n      }, codeInputs);\n    }\n  }]);\n  return ConfirmationCodeInput;\n}(_react.Component);\n\nexports.default = ConfirmationCodeInput;\nConfirmationCodeInput.propTypes = {\n  codeLength: _propTypes.default.number,\n  compareWithCode: _propTypes.default.string,\n  inputPosition: _propTypes.default.string,\n  size: _propTypes.default.number,\n  space: _propTypes.default.number,\n  className: _propTypes.default.string,\n  cellBorderWidth: _propTypes.default.number,\n  activeColor: _propTypes.default.string,\n  inactiveColor: _propTypes.default.string,\n  ignoreCase: _propTypes.default.bool,\n  autoFocus: _propTypes.default.bool,\n  codeInputStyle: _reactNative.TextInput.propTypes.style,\n  containerStyle: viewPropTypes.style,\n  onFulfill: _propTypes.default.func\n};\nConfirmationCodeInput.defaultProps = {\n  codeLength: 5,\n  inputPosition: 'center',\n  autoFocus: true,\n  size: 40,\n  className: 'border-box',\n  cellBorderWidth: 1,\n  activeColor: 'rgba(255, 255, 255, 1)',\n  inactiveColor: 'rgba(255, 255, 255, 0.2)',\n  space: 8,\n  compareWithCode: '',\n  ignoreCase: false\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 20\n  },\n  codeInput: {\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n    padding: 0\n  }\n});","map":{"version":3,"sources":["D:/Project/shop/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js"],"names":["viewPropTypes","ViewPropTypes","View","propTypes","ConfirmationCodeInput","props","state","codeArr","Array","codeLength","fill","currentIndex","codeInputRefs","compareWithCode","inputPosition","length","console","error","_","indexOf","setState","_setFocus","index","focus","blur","newCodeArr","clone","currentEmptyIndex","findIndex","c","i","code","ignoreCase","toLowerCase","size","position","justifyContent","height","space","marginRight","marginLeft","className","active","cellBorderWidth","activeColor","inactiveColor","classStyle","_getInputSpaceStyle","color","merge","borderWidth","borderColor","borderRadius","borderBottomWidth","borderTopWidth","borderLeftWidth","borderRightWidth","e","nativeEvent","key","nextIndex","character","onFulfill","join","isMatching","_isMatchingCode","clear","_blur","prevState","codeInputStyle","containerStyle","autoFocus","initialCodeInputStyle","width","codeInputs","id","push","ref","styles","codeInput","_getClassStyle","_onFocus","toString","text","_onInputCode","_onKeyPress","container","_getContainerStyle","Component","PropTypes","number","string","bool","TextInput","style","func","defaultProps","StyleSheet","create","flex","flexDirection","marginTop","backgroundColor","textAlign","padding"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { View, TextInput, StyleSheet, Dimensions, ViewPropTypes } from 'react-native';\nimport _ from 'lodash';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nexport default class ConfirmationCodeInput extends Component {\n  static propTypes = {\n    codeLength: PropTypes.number,\n    compareWithCode: PropTypes.string,\n    inputPosition: PropTypes.string,\n    size: PropTypes.number,\n    space: PropTypes.number,\n    className: PropTypes.string,\n    cellBorderWidth: PropTypes.number,\n    activeColor: PropTypes.string,\n    inactiveColor: PropTypes.string,\n    ignoreCase: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    codeInputStyle: TextInput.propTypes.style,\n    containerStyle: viewPropTypes.style,\n    onFulfill: PropTypes.func,\n  };\n  \n  static defaultProps = {\n    codeLength: 5,\n    inputPosition: 'center',\n    autoFocus: true,\n    size: 40,\n    className: 'border-box',\n    cellBorderWidth: 1,\n    activeColor: 'rgba(255, 255, 255, 1)',\n    inactiveColor: 'rgba(255, 255, 255, 0.2)',\n    space: 8,\n    compareWithCode: '',\n    ignoreCase: false\n  };\n  \n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      codeArr: new Array(this.props.codeLength).fill(''),\n      currentIndex: 0\n    };\n    \n    this.codeInputRefs = [];\n  }\n  \n  componentDidMount() {\n    const { compareWithCode, codeLength, inputPosition } = this.props;\n    if (compareWithCode && compareWithCode.length !== codeLength) {\n      console.error(\"Invalid props: compareWith length is not equal to codeLength\");\n    }\n    \n    if (_.indexOf(['center', 'left', 'right', 'full-width'], inputPosition) === -1) {\n      console.error('Invalid input position. Must be in: center, left, right, full');\n    }\n  }\n  \n  clear() {\n    this.setState({\n      codeArr: new Array(this.props.codeLength).fill(''),\n      currentIndex: 0\n    });\n    this._setFocus(0);\n  }\n  \n  _setFocus(index) {\n    this.codeInputRefs[index].focus();\n  }\n  \n  _blur(index) {\n    this.codeInputRefs[index].blur();\n  }\n  \n  _onFocus(index) {\n    let newCodeArr = _.clone(this.state.codeArr);\n    const currentEmptyIndex = _.findIndex(newCodeArr, c => !c);\n    if (currentEmptyIndex !== -1 && currentEmptyIndex < index) {\n      return this._setFocus(currentEmptyIndex);\n    }\n    for (const i in newCodeArr) {\n      if (i >= index) {\n        newCodeArr[i] = '';\n      }\n    }\n    \n    this.setState({\n      codeArr: newCodeArr,\n      currentIndex: index\n    })\n  }\n  \n  _isMatchingCode(code, compareWithCode, ignoreCase = false) {\n    if (ignoreCase) {\n      return code.toLowerCase() == compareWithCode.toLowerCase();\n    }\n    return code == compareWithCode;\n  }\n  \n  _getContainerStyle(size, position) {\n    switch (position) {\n      case 'left':\n        return {\n          justifyContent: 'flex-start',\n          height: size\n        };\n      case 'center':\n        return {\n          justifyContent: 'center',\n          height: size\n        };\n      case 'right':\n        return {\n          justifyContent: 'flex-end',\n          height: size\n        };\n      default:\n        return {\n          justifyContent: 'space-between',\n          height: size\n        }\n    }\n  }\n  \n  _getInputSpaceStyle(space) {\n    const { inputPosition } = this.props;\n    switch (inputPosition) {\n      case 'left':\n        return {\n          marginRight: space\n        };\n      case 'center':\n        return {\n          marginRight: space/2,\n          marginLeft: space/2\n        };\n      case 'right':\n        return {\n          marginLeft: space\n        };\n      default:\n        return {\n          marginRight: 0,\n          marginLeft: 0\n        };\n    }\n  }\n  \n  _getClassStyle(className, active) {\n    const { cellBorderWidth, activeColor, inactiveColor, space } = this.props;\n    let classStyle = {\n      ...this._getInputSpaceStyle(space),\n      color: activeColor\n    };\n    \n    switch (className) {\n      case 'clear':\n        return _.merge(classStyle, { borderWidth: 0 });\n      case 'border-box':\n        return _.merge(classStyle, {\n          borderWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-circle':\n        return _.merge(classStyle, {\n          borderWidth: cellBorderWidth,\n          borderRadius: 50,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-b':\n        return _.merge(classStyle, {\n          borderBottomWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor),\n        });\n      case 'border-b-t':\n        return _.merge(classStyle, {\n          borderTopWidth: cellBorderWidth,\n          borderBottomWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-l-r':\n        return _.merge(classStyle, {\n          borderLeftWidth: cellBorderWidth,\n          borderRightWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      default:\n        return className;\n    }\n  }\n  \n  _onKeyPress(e) {\n    if (e.nativeEvent.key === 'Backspace') {\n      const { currentIndex } = this.state;\n      const nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;\n      this._setFocus(nextIndex);\n    }\n  }\n  \n  _onInputCode(character, index) {\n    const { codeLength, onFulfill, compareWithCode, ignoreCase } = this.props;\n    let newCodeArr = _.clone(this.state.codeArr);\n    newCodeArr[index] = character;\n    \n    if (index == codeLength - 1) {\n      const code = newCodeArr.join('');\n      \n      if (compareWithCode) {\n        const isMatching = this._isMatchingCode(code, compareWithCode, ignoreCase);\n        onFulfill(isMatching, code);\n        !isMatching && this.clear();\n      } else {\n        onFulfill(code);\n      }\n      this._blur(this.state.currentIndex);\n    } else {\n      this._setFocus(this.state.currentIndex + 1);\n    }\n    \n    this.setState(prevState => {\n      return {\n        codeArr: newCodeArr,\n        currentIndex: prevState.currentIndex + 1\n      };\n    });\n  }\n  \n  render() {\n    const {\n      codeLength,\n      codeInputStyle,\n      containerStyle,\n      inputPosition,\n      autoFocus,\n      className,\n      size,\n      activeColor\n    } = this.props;\n    \n    const initialCodeInputStyle = {\n      width: size,\n      height: size\n    };\n    \n    let codeInputs = [];\n    for (let i = 0; i < codeLength; i++) {\n      const id = i;\n      codeInputs.push(\n        <TextInput\n          key={id}\n          ref={ref => (this.codeInputRefs[id] = ref)}\n          style={[\n            styles.codeInput, \n            initialCodeInputStyle, \n            this._getClassStyle(className, this.state.currentIndex == id),\n            codeInputStyle\n          ]}\n          underlineColorAndroid=\"transparent\"\n          selectionColor={activeColor}\n          keyboardType={'name-phone-pad'}\n          returnKeyType={'done'}\n          {...this.props}\n          autoFocus={autoFocus && id == 0}\n          onFocus={() => this._onFocus(id)}\n          value={this.state.codeArr[id] ? this.state.codeArr[id].toString() : ''}\n          onChangeText={text => this._onInputCode(text, id)}\n          onKeyPress={(e) => this._onKeyPress(e)}\n          maxLength={1}\n        />\n      )\n    }\n    \n    return (\n      <View style={[styles.container, this._getContainerStyle(size, inputPosition), containerStyle]}>\n        {codeInputs}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 20\n  },\n  codeInput: {\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n    padding: 0\n  }\n});\n"]},"metadata":{},"sourceType":"script"}